"use client"
import { useState } from "react"
import { useRouter, useSearchParams } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { ArrowLeftIcon } from "@radix-ui/react-icons";
import { Suspense } from "react";

function ProjectContent() {

    type ProjectKey = keyof typeof projects;
    const searchParams = useSearchParams();
    const project = searchParams.get("id") as ProjectKey | null;

    console.log(project);

    const projects = {
        "allergen-ai": [
            {
                title: 'Allergen AI',
                tools: ['Flask', 'SQLAlchemy', 'PostgreSQL', 'AWS S3', 'OpenAI', 'Tesseract', 'Javascript', 'Bootstrap'],
                description: 'Allergen-AI is a tool designed for people with/people with loved ones that have severe food allergies which allows them to submit a recipe and have it modified to fit their dietary restrictions. This project was built using Flask, with some web components being written in Javascript. The new/modified recipes are generated by OpenAI\'s GPT-3.5 model, and all data such as recipes and account information is stored in a PostgreSQL database managed with SQLAlchemy. Recipes are saved as PDFs after creation, and are stored in an AWS S3 bucket. Users have the option to upload a picture of a recipe to be read by the AI, the image modified with cv2 and is then converted into text using Tesseract',
                demo_type: 'image',
                demo_desc: '',
                demo: '/allergen-ai-screenshot.png',
                links: [
                    {
                        name: 'Website',
                        url: 'https://allergen-ai.com'
                    },
                    {
                        name: 'GitHub',
                        url: 'https://github.com/zachluh/allergen_ai'
                    }
                ]
            }
        ],

        "newgen-me": [
            {
                title: 'newgen.me',
                tools: ['NextJS', 'React', 'TypeScript', 'AWS S3', 'PrismaDB', 'PostgreSQL', 'Stripe', 'Resend', 'OpenAI'],
                description: 'A platform that serves two purposes: connecting people interested in fashion with brands that fit their aesthetic, and helping underground brands reach a more targeted audience. This project was built using Next.js and TypeScript, with a PostgreSQL database managed by PrismaDB. Users are asked to write a short description of their fashion sense preferences, and a OpenAI model scours through the brand database to match said user with brands that would pique their interest. Brands can create profiles to showcase their products, a profile maintained on the website through a monthly subscription managed by Stripe. Pictures uploaded by brands are saved on an AWS S3 bucket. The project also sports a e-mail verification and password reset feature using Resend ',
                demo_type: 'video',
                demo_desc: 'In this demonstration, I show off the key features of newgen.me, including the regular user and brand owner experience, as well as the brand onboarding process',
                demo: 'https://www.youtube.com/embed/riRCkvnY1mM?si=y1Nd2jv9GfRCeGGB',
                links: []
            }
        ],

        "canalNet": [
            {
                title: 'CanalNet',
                tools: ['Flask', 'SqlAlchemy', 'PostgreSQL', 'Bootstrap', 'Javascript'],
                description: 'CanalNet is a administrative management tool built for Parks Canada in Ontario. More specifically, it allows managers of different parks to put in orders for resources that their park may require. Additionally, it lets the website administrator manage orders and create summaries of orders that fit certain criteria. This project was built using Flask, with some web components being written in Javascript and beautified with Bootstrap. All data such as orders and account information is stored in a PostgreSQL database managed with SQLAlchemy',
                demo_type: 'image',
                demo_desc: '',
                demo: '/parks canada.png',
                links: [
                    {
                        name: 'GitHub',
                        url: 'https://github.com/Lambda-Epsilon/CanalNet-proto'
                    }
                ]
            }
        ]
    };


    return (
        <div>
            {!project && (
                <div className="flex flex-col justify-center items-center min-h-screen">
                    <h1 className="text-2xl mb-4 text-red-700">This projects page is still being built</h1>
                    <br />
                    <p className="text-lg text-white">Check back later for updates!</p>
                    <Button className="mt-40 bg-black ring-1 ring-white hover:bg-red-700 hover:text-black hover:ring-red-700 transition-all duration-300" onClick={() => window.location.href = "/"}>
                        <span className="group inline-flex items-center">
                            <ArrowLeftIcon className="mr-3 size-4 transition-transform duration-300 group-hover:translate-x-1" />
                            Back to home
                            
                        </span>
                    </Button>                   
                </div>
            )}

            {project && projects[project] && (
                <div className="grid grid-cols-2 h-screen">
                    <div className="p-32">
                        <h1 className="text-5xl text-red-700">{projects[project][0].title}</h1>
                        <Button className="mt-96 bg-black ring-1 ring-white hover:bg-red-700 hover:text-black hover:ring-red-700 transition-all duration-300" onClick={() => window.location.href = "/"}>
                            <span className="group inline-flex items-center">
                                <ArrowLeftIcon className="mr-3 size-4 transition-transform duration-300 group-hover:translate-x-1" />
                                Back to home
                                
                            </span>
                        </Button>
                    </div>
                    <div className="p-32 overflow-y-auto [mask-image:linear-gradient(to_top,transparent_5%,#000_100%)]">
                        {projects[project][0].demo_type === "image" && (
                            <div>
                                <img className="mb-4" src={projects[project][0].demo} alt={projects[project][0].title} style={{ objectFit: "cover" }} />
                                <p>{projects[project][0].demo_desc}</p>
                            </div>
                        )}
                        {projects[project][0].demo_type === "video" && (
                            <div>
                                <iframe
                                    className="mb-4"
                                    width="560"
                                    height="315"
                                    src={projects[project][0].demo}
                                    title="YouTube video player"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    allowFullScreen>
                                </iframe>
                                <p className="text-white text-sm mb-4">{projects[project][0].demo_desc}</p>
                            </div>
                        )}
                        <div>
                            {projects[project][0].tools.map((tool) => (
                                <span key={tool} className="text-white text-sm px-2 py-1 rounded-full mr-2 mb-5 ring-1 ring-white hover:bg-white hover:text-black transition-all duration-300">{tool}</span>
                            ))}                            
                        </div>
                        <div className="mt-12">
                                <h2 className="text-2xl text-red-700 mb-8">Links</h2>
                                <ul className="list-disc list-inside">
                                    {projects[project][0].links.length === 0 && (
                                        <li className="text-lg text-white">The repo for this project is currently private</li>
                                    )}
                                    {projects[project][0].links.length > 0 && (
                                        projects[project][0].links.map((link, index) => (
                                            <li key={index}>
                                                <a href={link.url} className="text-lg text-white hover:underline">{link.name}</a>
                                            </li>
                                        ))                                         
                                    )}
 
                                </ul>                         
                            <div className="mt-12">
                                <h2 className="text-2xl text-red-700 mb-8">Description</h2>
                                <p className="text-lg text-white">{projects[project][0].description}</p>                                
                            </div>
                        </div>
                    </div>                    
                </div>
            )}

        </div>
    )
}

export default function Projects() {
  return (
    <Suspense fallback={<div className=" flex flex-col min-h-screen justify-center items-center text-red-700 p-10">Loading project...</div>}>
      <ProjectContent />
    </Suspense>
  );
}